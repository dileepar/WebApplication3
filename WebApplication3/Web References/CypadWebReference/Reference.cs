//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WebApplication3.CypadWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CypadSQMSyncSoap", Namespace="http://tempuri.org/")]
    public partial class CypadSQMSync : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UserDeviceManagementOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsDeviceNeedsResettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStudentTransactionsURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMealSelectionURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTradingSummaryURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWeekMenuURLOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateLastSynchronisedN2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AutoConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSyncTablesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearSyncTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback AckSyncTablesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback AckTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDataZippedNOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadImageRawNOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadImageRawOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadImageZippedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentZippedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinkImageZippedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStaffImageZippedOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmailInspectionReportStandardOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmailInspectionReportSSP7OperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadZippedTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckVersionForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewMessagesForSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCashSessionTotalOperationCompleted;
        
        private System.Threading.SendOrPostCallback TotalMealsPreSelectedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAttachmentsZippedOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CypadSQMSync() {
            this.Url = global::WebApplication3.Properties.Settings.Default.WebApplication3_CypadWebReference_CypadSQMSync;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UserDeviceManagementCompletedEventHandler UserDeviceManagementCompleted;
        
        /// <remarks/>
        public event IsDeviceNeedsResettingCompletedEventHandler IsDeviceNeedsResettingCompleted;
        
        /// <remarks/>
        public event GetStudentTransactionsURLCompletedEventHandler GetStudentTransactionsURLCompleted;
        
        /// <remarks/>
        public event GetMealSelectionURLCompletedEventHandler GetMealSelectionURLCompleted;
        
        /// <remarks/>
        public event GetTradingSummaryURLCompletedEventHandler GetTradingSummaryURLCompleted;
        
        /// <remarks/>
        public event GetWeekMenuURLCompletedEventHandler GetWeekMenuURLCompleted;
        
        /// <remarks/>
        public event UpdateLastSynchronisedN2CompletedEventHandler UpdateLastSynchronisedN2Completed;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event GetPasswordCompletedEventHandler GetPasswordCompleted;
        
        /// <remarks/>
        public event AuthenticateCompletedEventHandler AuthenticateCompleted;
        
        /// <remarks/>
        public event AutoConfigCompletedEventHandler AutoConfigCompleted;
        
        /// <remarks/>
        public event GetSyncTablesCompletedEventHandler GetSyncTablesCompleted;
        
        /// <remarks/>
        public event ClearSyncTableCompletedEventHandler ClearSyncTableCompleted;
        
        /// <remarks/>
        public event AckSyncTablesCompletedEventHandler AckSyncTablesCompleted;
        
        /// <remarks/>
        public event DownloadTableCompletedEventHandler DownloadTableCompleted;
        
        /// <remarks/>
        public event AckTableCompletedEventHandler AckTableCompleted;
        
        /// <remarks/>
        public event UploadDataZippedNCompletedEventHandler UploadDataZippedNCompleted;
        
        /// <remarks/>
        public event UploadImageRawNCompletedEventHandler UploadImageRawNCompleted;
        
        /// <remarks/>
        public event UploadImageRawCompletedEventHandler UploadImageRawCompleted;
        
        /// <remarks/>
        public event UploadImageZippedCompletedEventHandler UploadImageZippedCompleted;
        
        /// <remarks/>
        public event GetDocumentZippedCompletedEventHandler GetDocumentZippedCompleted;
        
        /// <remarks/>
        public event GetLinkImageZippedCompletedEventHandler GetLinkImageZippedCompleted;
        
        /// <remarks/>
        public event GetStaffImageZippedCompletedEventHandler GetStaffImageZippedCompleted;
        
        /// <remarks/>
        public event EmailInspectionReportStandardCompletedEventHandler EmailInspectionReportStandardCompleted;
        
        /// <remarks/>
        public event EmailInspectionReportSSP7CompletedEventHandler EmailInspectionReportSSP7Completed;
        
        /// <remarks/>
        public event DownloadZippedTableCompletedEventHandler DownloadZippedTableCompleted;
        
        /// <remarks/>
        public event CheckVersionCompletedEventHandler CheckVersionCompleted;
        
        /// <remarks/>
        public event CheckVersionForUserCompletedEventHandler CheckVersionForUserCompleted;
        
        /// <remarks/>
        public event GetNewMessagesForSiteCompletedEventHandler GetNewMessagesForSiteCompleted;
        
        /// <remarks/>
        public event SendEmailCompletedEventHandler SendEmailCompleted;
        
        /// <remarks/>
        public event CheckCashSessionTotalCompletedEventHandler CheckCashSessionTotalCompleted;
        
        /// <remarks/>
        public event TotalMealsPreSelectedCompletedEventHandler TotalMealsPreSelectedCompleted;
        
        /// <remarks/>
        public event GetAttachmentsZippedCompletedEventHandler GetAttachmentsZippedCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserDeviceManagement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UserDeviceManagement(string UserId, string DeviceId, string DataString) {
            object[] results = this.Invoke("UserDeviceManagement", new object[] {
                        UserId,
                        DeviceId,
                        DataString});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UserDeviceManagementAsync(string UserId, string DeviceId, string DataString) {
            this.UserDeviceManagementAsync(UserId, DeviceId, DataString, null);
        }
        
        /// <remarks/>
        public void UserDeviceManagementAsync(string UserId, string DeviceId, string DataString, object userState) {
            if ((this.UserDeviceManagementOperationCompleted == null)) {
                this.UserDeviceManagementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserDeviceManagementOperationCompleted);
            }
            this.InvokeAsync("UserDeviceManagement", new object[] {
                        UserId,
                        DeviceId,
                        DataString}, this.UserDeviceManagementOperationCompleted, userState);
        }
        
        private void OnUserDeviceManagementOperationCompleted(object arg) {
            if ((this.UserDeviceManagementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserDeviceManagementCompleted(this, new UserDeviceManagementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsDeviceNeedsResetting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsDeviceNeedsResetting(string UserId, string DeviceId) {
            object[] results = this.Invoke("IsDeviceNeedsResetting", new object[] {
                        UserId,
                        DeviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsDeviceNeedsResettingAsync(string UserId, string DeviceId) {
            this.IsDeviceNeedsResettingAsync(UserId, DeviceId, null);
        }
        
        /// <remarks/>
        public void IsDeviceNeedsResettingAsync(string UserId, string DeviceId, object userState) {
            if ((this.IsDeviceNeedsResettingOperationCompleted == null)) {
                this.IsDeviceNeedsResettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsDeviceNeedsResettingOperationCompleted);
            }
            this.InvokeAsync("IsDeviceNeedsResetting", new object[] {
                        UserId,
                        DeviceId}, this.IsDeviceNeedsResettingOperationCompleted, userState);
        }
        
        private void OnIsDeviceNeedsResettingOperationCompleted(object arg) {
            if ((this.IsDeviceNeedsResettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsDeviceNeedsResettingCompleted(this, new IsDeviceNeedsResettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStudentTransactionsURL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStudentTransactionsURL(string StudentGuid) {
            object[] results = this.Invoke("GetStudentTransactionsURL", new object[] {
                        StudentGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStudentTransactionsURLAsync(string StudentGuid) {
            this.GetStudentTransactionsURLAsync(StudentGuid, null);
        }
        
        /// <remarks/>
        public void GetStudentTransactionsURLAsync(string StudentGuid, object userState) {
            if ((this.GetStudentTransactionsURLOperationCompleted == null)) {
                this.GetStudentTransactionsURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStudentTransactionsURLOperationCompleted);
            }
            this.InvokeAsync("GetStudentTransactionsURL", new object[] {
                        StudentGuid}, this.GetStudentTransactionsURLOperationCompleted, userState);
        }
        
        private void OnGetStudentTransactionsURLOperationCompleted(object arg) {
            if ((this.GetStudentTransactionsURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStudentTransactionsURLCompleted(this, new GetStudentTransactionsURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMealSelectionURL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMealSelectionURL(string LocationGuid) {
            object[] results = this.Invoke("GetMealSelectionURL", new object[] {
                        LocationGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMealSelectionURLAsync(string LocationGuid) {
            this.GetMealSelectionURLAsync(LocationGuid, null);
        }
        
        /// <remarks/>
        public void GetMealSelectionURLAsync(string LocationGuid, object userState) {
            if ((this.GetMealSelectionURLOperationCompleted == null)) {
                this.GetMealSelectionURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMealSelectionURLOperationCompleted);
            }
            this.InvokeAsync("GetMealSelectionURL", new object[] {
                        LocationGuid}, this.GetMealSelectionURLOperationCompleted, userState);
        }
        
        private void OnGetMealSelectionURLOperationCompleted(object arg) {
            if ((this.GetMealSelectionURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMealSelectionURLCompleted(this, new GetMealSelectionURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTradingSummaryURL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTradingSummaryURL(string UserGuid) {
            object[] results = this.Invoke("GetTradingSummaryURL", new object[] {
                        UserGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTradingSummaryURLAsync(string UserGuid) {
            this.GetTradingSummaryURLAsync(UserGuid, null);
        }
        
        /// <remarks/>
        public void GetTradingSummaryURLAsync(string UserGuid, object userState) {
            if ((this.GetTradingSummaryURLOperationCompleted == null)) {
                this.GetTradingSummaryURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTradingSummaryURLOperationCompleted);
            }
            this.InvokeAsync("GetTradingSummaryURL", new object[] {
                        UserGuid}, this.GetTradingSummaryURLOperationCompleted, userState);
        }
        
        private void OnGetTradingSummaryURLOperationCompleted(object arg) {
            if ((this.GetTradingSummaryURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTradingSummaryURLCompleted(this, new GetTradingSummaryURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWeekMenuURL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWeekMenuURL(string LocationGuid) {
            object[] results = this.Invoke("GetWeekMenuURL", new object[] {
                        LocationGuid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWeekMenuURLAsync(string LocationGuid) {
            this.GetWeekMenuURLAsync(LocationGuid, null);
        }
        
        /// <remarks/>
        public void GetWeekMenuURLAsync(string LocationGuid, object userState) {
            if ((this.GetWeekMenuURLOperationCompleted == null)) {
                this.GetWeekMenuURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWeekMenuURLOperationCompleted);
            }
            this.InvokeAsync("GetWeekMenuURL", new object[] {
                        LocationGuid}, this.GetWeekMenuURLOperationCompleted, userState);
        }
        
        private void OnGetWeekMenuURLOperationCompleted(object arg) {
            if ((this.GetWeekMenuURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWeekMenuURLCompleted(this, new GetWeekMenuURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLastSynchronisedN2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateLastSynchronisedN2(string UserId, string DeviceId, string LastSynchronised, string Usage, string Version, string Duration) {
            object[] results = this.Invoke("UpdateLastSynchronisedN2", new object[] {
                        UserId,
                        DeviceId,
                        LastSynchronised,
                        Usage,
                        Version,
                        Duration});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateLastSynchronisedN2Async(string UserId, string DeviceId, string LastSynchronised, string Usage, string Version, string Duration) {
            this.UpdateLastSynchronisedN2Async(UserId, DeviceId, LastSynchronised, Usage, Version, Duration, null);
        }
        
        /// <remarks/>
        public void UpdateLastSynchronisedN2Async(string UserId, string DeviceId, string LastSynchronised, string Usage, string Version, string Duration, object userState) {
            if ((this.UpdateLastSynchronisedN2OperationCompleted == null)) {
                this.UpdateLastSynchronisedN2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateLastSynchronisedN2OperationCompleted);
            }
            this.InvokeAsync("UpdateLastSynchronisedN2", new object[] {
                        UserId,
                        DeviceId,
                        LastSynchronised,
                        Usage,
                        Version,
                        Duration}, this.UpdateLastSynchronisedN2OperationCompleted, userState);
        }
        
        private void OnUpdateLastSynchronisedN2OperationCompleted(object arg) {
            if ((this.UpdateLastSynchronisedN2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateLastSynchronisedN2Completed(this, new UpdateLastSynchronisedN2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangePassword(string UserId, string NewPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        UserId,
                        NewPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string UserId, string NewPassword) {
            this.ChangePasswordAsync(UserId, NewPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string UserId, string NewPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        UserId,
                        NewPassword}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPassword(string UserId) {
            object[] results = this.Invoke("GetPassword", new object[] {
                        UserId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPasswordAsync(string UserId) {
            this.GetPasswordAsync(UserId, null);
        }
        
        /// <remarks/>
        public void GetPasswordAsync(string UserId, object userState) {
            if ((this.GetPasswordOperationCompleted == null)) {
                this.GetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPasswordOperationCompleted);
            }
            this.InvokeAsync("GetPassword", new object[] {
                        UserId}, this.GetPasswordOperationCompleted, userState);
        }
        
        private void OnGetPasswordOperationCompleted(object arg) {
            if ((this.GetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPasswordCompleted(this, new GetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Authenticate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Authenticate(string UserName, string Password, string DeviceId) {
            object[] results = this.Invoke("Authenticate", new object[] {
                        UserName,
                        Password,
                        DeviceId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string UserName, string Password, string DeviceId) {
            this.AuthenticateAsync(UserName, Password, DeviceId, null);
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string UserName, string Password, string DeviceId, object userState) {
            if ((this.AuthenticateOperationCompleted == null)) {
                this.AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateOperationCompleted);
            }
            this.InvokeAsync("Authenticate", new object[] {
                        UserName,
                        Password,
                        DeviceId}, this.AuthenticateOperationCompleted, userState);
        }
        
        private void OnAuthenticateOperationCompleted(object arg) {
            if ((this.AuthenticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AutoConfig", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AutoConfig(string Client, string Attribute) {
            object[] results = this.Invoke("AutoConfig", new object[] {
                        Client,
                        Attribute});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AutoConfigAsync(string Client, string Attribute) {
            this.AutoConfigAsync(Client, Attribute, null);
        }
        
        /// <remarks/>
        public void AutoConfigAsync(string Client, string Attribute, object userState) {
            if ((this.AutoConfigOperationCompleted == null)) {
                this.AutoConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAutoConfigOperationCompleted);
            }
            this.InvokeAsync("AutoConfig", new object[] {
                        Client,
                        Attribute}, this.AutoConfigOperationCompleted, userState);
        }
        
        private void OnAutoConfigOperationCompleted(object arg) {
            if ((this.AutoConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AutoConfigCompleted(this, new AutoConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSyncTables", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSyncTables(string UserId, string DeviceId) {
            object[] results = this.Invoke("GetSyncTables", new object[] {
                        UserId,
                        DeviceId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSyncTablesAsync(string UserId, string DeviceId) {
            this.GetSyncTablesAsync(UserId, DeviceId, null);
        }
        
        /// <remarks/>
        public void GetSyncTablesAsync(string UserId, string DeviceId, object userState) {
            if ((this.GetSyncTablesOperationCompleted == null)) {
                this.GetSyncTablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSyncTablesOperationCompleted);
            }
            this.InvokeAsync("GetSyncTables", new object[] {
                        UserId,
                        DeviceId}, this.GetSyncTablesOperationCompleted, userState);
        }
        
        private void OnGetSyncTablesOperationCompleted(object arg) {
            if ((this.GetSyncTablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSyncTablesCompleted(this, new GetSyncTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearSyncTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ClearSyncTable(string UserId, string DeviceId, string TableName) {
            object[] results = this.Invoke("ClearSyncTable", new object[] {
                        UserId,
                        DeviceId,
                        TableName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ClearSyncTableAsync(string UserId, string DeviceId, string TableName) {
            this.ClearSyncTableAsync(UserId, DeviceId, TableName, null);
        }
        
        /// <remarks/>
        public void ClearSyncTableAsync(string UserId, string DeviceId, string TableName, object userState) {
            if ((this.ClearSyncTableOperationCompleted == null)) {
                this.ClearSyncTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearSyncTableOperationCompleted);
            }
            this.InvokeAsync("ClearSyncTable", new object[] {
                        UserId,
                        DeviceId,
                        TableName}, this.ClearSyncTableOperationCompleted, userState);
        }
        
        private void OnClearSyncTableOperationCompleted(object arg) {
            if ((this.ClearSyncTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearSyncTableCompleted(this, new ClearSyncTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AckSyncTables", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AckSyncTables(string UserId, string DeviceId) {
            object[] results = this.Invoke("AckSyncTables", new object[] {
                        UserId,
                        DeviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AckSyncTablesAsync(string UserId, string DeviceId) {
            this.AckSyncTablesAsync(UserId, DeviceId, null);
        }
        
        /// <remarks/>
        public void AckSyncTablesAsync(string UserId, string DeviceId, object userState) {
            if ((this.AckSyncTablesOperationCompleted == null)) {
                this.AckSyncTablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAckSyncTablesOperationCompleted);
            }
            this.InvokeAsync("AckSyncTables", new object[] {
                        UserId,
                        DeviceId}, this.AckSyncTablesOperationCompleted, userState);
        }
        
        private void OnAckSyncTablesOperationCompleted(object arg) {
            if ((this.AckSyncTablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AckSyncTablesCompleted(this, new AckSyncTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DownloadTable(string UserId, string DeviceId, string TableName, string BlockId) {
            object[] results = this.Invoke("DownloadTable", new object[] {
                        UserId,
                        DeviceId,
                        TableName,
                        BlockId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadTableAsync(string UserId, string DeviceId, string TableName, string BlockId) {
            this.DownloadTableAsync(UserId, DeviceId, TableName, BlockId, null);
        }
        
        /// <remarks/>
        public void DownloadTableAsync(string UserId, string DeviceId, string TableName, string BlockId, object userState) {
            if ((this.DownloadTableOperationCompleted == null)) {
                this.DownloadTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadTableOperationCompleted);
            }
            this.InvokeAsync("DownloadTable", new object[] {
                        UserId,
                        DeviceId,
                        TableName,
                        BlockId}, this.DownloadTableOperationCompleted, userState);
        }
        
        private void OnDownloadTableOperationCompleted(object arg) {
            if ((this.DownloadTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadTableCompleted(this, new DownloadTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AckTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AckTable(string UserId, string DeviceId, string TableName, string BlockId) {
            object[] results = this.Invoke("AckTable", new object[] {
                        UserId,
                        DeviceId,
                        TableName,
                        BlockId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AckTableAsync(string UserId, string DeviceId, string TableName, string BlockId) {
            this.AckTableAsync(UserId, DeviceId, TableName, BlockId, null);
        }
        
        /// <remarks/>
        public void AckTableAsync(string UserId, string DeviceId, string TableName, string BlockId, object userState) {
            if ((this.AckTableOperationCompleted == null)) {
                this.AckTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAckTableOperationCompleted);
            }
            this.InvokeAsync("AckTable", new object[] {
                        UserId,
                        DeviceId,
                        TableName,
                        BlockId}, this.AckTableOperationCompleted, userState);
        }
        
        private void OnAckTableOperationCompleted(object arg) {
            if ((this.AckTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AckTableCompleted(this, new AckTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDataZippedN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadDataZippedN(string TableName, string TableId, string InsertColumns, string UpdateColumns, string UserId, string DeviceId, string Data) {
            object[] results = this.Invoke("UploadDataZippedN", new object[] {
                        TableName,
                        TableId,
                        InsertColumns,
                        UpdateColumns,
                        UserId,
                        DeviceId,
                        Data});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDataZippedNAsync(string TableName, string TableId, string InsertColumns, string UpdateColumns, string UserId, string DeviceId, string Data) {
            this.UploadDataZippedNAsync(TableName, TableId, InsertColumns, UpdateColumns, UserId, DeviceId, Data, null);
        }
        
        /// <remarks/>
        public void UploadDataZippedNAsync(string TableName, string TableId, string InsertColumns, string UpdateColumns, string UserId, string DeviceId, string Data, object userState) {
            if ((this.UploadDataZippedNOperationCompleted == null)) {
                this.UploadDataZippedNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDataZippedNOperationCompleted);
            }
            this.InvokeAsync("UploadDataZippedN", new object[] {
                        TableName,
                        TableId,
                        InsertColumns,
                        UpdateColumns,
                        UserId,
                        DeviceId,
                        Data}, this.UploadDataZippedNOperationCompleted, userState);
        }
        
        private void OnUploadDataZippedNOperationCompleted(object arg) {
            if ((this.UploadDataZippedNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDataZippedNCompleted(this, new UploadDataZippedNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadImageRawN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadImageRawN(string TableId, string Data, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ImageData, string UserId, string DeviceId) {
            object[] results = this.Invoke("UploadImageRawN", new object[] {
                        TableId,
                        Data,
                        ImageData,
                        UserId,
                        DeviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadImageRawNAsync(string TableId, string Data, byte[] ImageData, string UserId, string DeviceId) {
            this.UploadImageRawNAsync(TableId, Data, ImageData, UserId, DeviceId, null);
        }
        
        /// <remarks/>
        public void UploadImageRawNAsync(string TableId, string Data, byte[] ImageData, string UserId, string DeviceId, object userState) {
            if ((this.UploadImageRawNOperationCompleted == null)) {
                this.UploadImageRawNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadImageRawNOperationCompleted);
            }
            this.InvokeAsync("UploadImageRawN", new object[] {
                        TableId,
                        Data,
                        ImageData,
                        UserId,
                        DeviceId}, this.UploadImageRawNOperationCompleted, userState);
        }
        
        private void OnUploadImageRawNOperationCompleted(object arg) {
            if ((this.UploadImageRawNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadImageRawNCompleted(this, new UploadImageRawNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadImageRaw", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadImageRaw(string TableId, string Data, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ImageData) {
            object[] results = this.Invoke("UploadImageRaw", new object[] {
                        TableId,
                        Data,
                        ImageData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadImageRawAsync(string TableId, string Data, byte[] ImageData) {
            this.UploadImageRawAsync(TableId, Data, ImageData, null);
        }
        
        /// <remarks/>
        public void UploadImageRawAsync(string TableId, string Data, byte[] ImageData, object userState) {
            if ((this.UploadImageRawOperationCompleted == null)) {
                this.UploadImageRawOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadImageRawOperationCompleted);
            }
            this.InvokeAsync("UploadImageRaw", new object[] {
                        TableId,
                        Data,
                        ImageData}, this.UploadImageRawOperationCompleted, userState);
        }
        
        private void OnUploadImageRawOperationCompleted(object arg) {
            if ((this.UploadImageRawCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadImageRawCompleted(this, new UploadImageRawCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadImageZipped", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadImageZipped(string TableId, string Data, string ImageData) {
            object[] results = this.Invoke("UploadImageZipped", new object[] {
                        TableId,
                        Data,
                        ImageData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadImageZippedAsync(string TableId, string Data, string ImageData) {
            this.UploadImageZippedAsync(TableId, Data, ImageData, null);
        }
        
        /// <remarks/>
        public void UploadImageZippedAsync(string TableId, string Data, string ImageData, object userState) {
            if ((this.UploadImageZippedOperationCompleted == null)) {
                this.UploadImageZippedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadImageZippedOperationCompleted);
            }
            this.InvokeAsync("UploadImageZipped", new object[] {
                        TableId,
                        Data,
                        ImageData}, this.UploadImageZippedOperationCompleted, userState);
        }
        
        private void OnUploadImageZippedOperationCompleted(object arg) {
            if ((this.UploadImageZippedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadImageZippedCompleted(this, new UploadImageZippedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentZipped", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentZipped(string DocumentId) {
            object[] results = this.Invoke("GetDocumentZipped", new object[] {
                        DocumentId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentZippedAsync(string DocumentId) {
            this.GetDocumentZippedAsync(DocumentId, null);
        }
        
        /// <remarks/>
        public void GetDocumentZippedAsync(string DocumentId, object userState) {
            if ((this.GetDocumentZippedOperationCompleted == null)) {
                this.GetDocumentZippedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentZippedOperationCompleted);
            }
            this.InvokeAsync("GetDocumentZipped", new object[] {
                        DocumentId}, this.GetDocumentZippedOperationCompleted, userState);
        }
        
        private void OnGetDocumentZippedOperationCompleted(object arg) {
            if ((this.GetDocumentZippedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentZippedCompleted(this, new GetDocumentZippedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLinkImageZipped", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLinkImageZipped(string ImageId) {
            object[] results = this.Invoke("GetLinkImageZipped", new object[] {
                        ImageId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkImageZippedAsync(string ImageId) {
            this.GetLinkImageZippedAsync(ImageId, null);
        }
        
        /// <remarks/>
        public void GetLinkImageZippedAsync(string ImageId, object userState) {
            if ((this.GetLinkImageZippedOperationCompleted == null)) {
                this.GetLinkImageZippedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkImageZippedOperationCompleted);
            }
            this.InvokeAsync("GetLinkImageZipped", new object[] {
                        ImageId}, this.GetLinkImageZippedOperationCompleted, userState);
        }
        
        private void OnGetLinkImageZippedOperationCompleted(object arg) {
            if ((this.GetLinkImageZippedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkImageZippedCompleted(this, new GetLinkImageZippedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStaffImageZipped", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStaffImageZipped(string ImageId) {
            object[] results = this.Invoke("GetStaffImageZipped", new object[] {
                        ImageId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStaffImageZippedAsync(string ImageId) {
            this.GetStaffImageZippedAsync(ImageId, null);
        }
        
        /// <remarks/>
        public void GetStaffImageZippedAsync(string ImageId, object userState) {
            if ((this.GetStaffImageZippedOperationCompleted == null)) {
                this.GetStaffImageZippedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStaffImageZippedOperationCompleted);
            }
            this.InvokeAsync("GetStaffImageZipped", new object[] {
                        ImageId}, this.GetStaffImageZippedOperationCompleted, userState);
        }
        
        private void OnGetStaffImageZippedOperationCompleted(object arg) {
            if ((this.GetStaffImageZippedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStaffImageZippedCompleted(this, new GetStaffImageZippedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EmailInspectionReportStandard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EmailInspectionReportStandard(string UserId, string DeviceId) {
            object[] results = this.Invoke("EmailInspectionReportStandard", new object[] {
                        UserId,
                        DeviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EmailInspectionReportStandardAsync(string UserId, string DeviceId) {
            this.EmailInspectionReportStandardAsync(UserId, DeviceId, null);
        }
        
        /// <remarks/>
        public void EmailInspectionReportStandardAsync(string UserId, string DeviceId, object userState) {
            if ((this.EmailInspectionReportStandardOperationCompleted == null)) {
                this.EmailInspectionReportStandardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmailInspectionReportStandardOperationCompleted);
            }
            this.InvokeAsync("EmailInspectionReportStandard", new object[] {
                        UserId,
                        DeviceId}, this.EmailInspectionReportStandardOperationCompleted, userState);
        }
        
        private void OnEmailInspectionReportStandardOperationCompleted(object arg) {
            if ((this.EmailInspectionReportStandardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmailInspectionReportStandardCompleted(this, new EmailInspectionReportStandardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EmailInspectionReportSSP7", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EmailInspectionReportSSP7(string UserId) {
            object[] results = this.Invoke("EmailInspectionReportSSP7", new object[] {
                        UserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EmailInspectionReportSSP7Async(string UserId) {
            this.EmailInspectionReportSSP7Async(UserId, null);
        }
        
        /// <remarks/>
        public void EmailInspectionReportSSP7Async(string UserId, object userState) {
            if ((this.EmailInspectionReportSSP7OperationCompleted == null)) {
                this.EmailInspectionReportSSP7OperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmailInspectionReportSSP7OperationCompleted);
            }
            this.InvokeAsync("EmailInspectionReportSSP7", new object[] {
                        UserId}, this.EmailInspectionReportSSP7OperationCompleted, userState);
        }
        
        private void OnEmailInspectionReportSSP7OperationCompleted(object arg) {
            if ((this.EmailInspectionReportSSP7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmailInspectionReportSSP7Completed(this, new EmailInspectionReportSSP7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadZippedTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DownloadZippedTable(string UserId, string DeviceId, string TableName, string TableId, string BlockId) {
            object[] results = this.Invoke("DownloadZippedTable", new object[] {
                        UserId,
                        DeviceId,
                        TableName,
                        TableId,
                        BlockId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadZippedTableAsync(string UserId, string DeviceId, string TableName, string TableId, string BlockId) {
            this.DownloadZippedTableAsync(UserId, DeviceId, TableName, TableId, BlockId, null);
        }
        
        /// <remarks/>
        public void DownloadZippedTableAsync(string UserId, string DeviceId, string TableName, string TableId, string BlockId, object userState) {
            if ((this.DownloadZippedTableOperationCompleted == null)) {
                this.DownloadZippedTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadZippedTableOperationCompleted);
            }
            this.InvokeAsync("DownloadZippedTable", new object[] {
                        UserId,
                        DeviceId,
                        TableName,
                        TableId,
                        BlockId}, this.DownloadZippedTableOperationCompleted, userState);
        }
        
        private void OnDownloadZippedTableOperationCompleted(object arg) {
            if ((this.DownloadZippedTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadZippedTableCompleted(this, new DownloadZippedTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckVersion(string Module) {
            object[] results = this.Invoke("CheckVersion", new object[] {
                        Module});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckVersionAsync(string Module) {
            this.CheckVersionAsync(Module, null);
        }
        
        /// <remarks/>
        public void CheckVersionAsync(string Module, object userState) {
            if ((this.CheckVersionOperationCompleted == null)) {
                this.CheckVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckVersionOperationCompleted);
            }
            this.InvokeAsync("CheckVersion", new object[] {
                        Module}, this.CheckVersionOperationCompleted, userState);
        }
        
        private void OnCheckVersionOperationCompleted(object arg) {
            if ((this.CheckVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckVersionCompleted(this, new CheckVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckVersionForUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckVersionForUser(string Module, string UserId, string DeviceId) {
            object[] results = this.Invoke("CheckVersionForUser", new object[] {
                        Module,
                        UserId,
                        DeviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckVersionForUserAsync(string Module, string UserId, string DeviceId) {
            this.CheckVersionForUserAsync(Module, UserId, DeviceId, null);
        }
        
        /// <remarks/>
        public void CheckVersionForUserAsync(string Module, string UserId, string DeviceId, object userState) {
            if ((this.CheckVersionForUserOperationCompleted == null)) {
                this.CheckVersionForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckVersionForUserOperationCompleted);
            }
            this.InvokeAsync("CheckVersionForUser", new object[] {
                        Module,
                        UserId,
                        DeviceId}, this.CheckVersionForUserOperationCompleted, userState);
        }
        
        private void OnCheckVersionForUserOperationCompleted(object arg) {
            if ((this.CheckVersionForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckVersionForUserCompleted(this, new CheckVersionForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetNewMessagesForSite", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetNewMessagesForSite(string UserId, string DeviceId, string BlockId) {
            object[] results = this.Invoke("GetNewMessagesForSite", new object[] {
                        UserId,
                        DeviceId,
                        BlockId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewMessagesForSiteAsync(string UserId, string DeviceId, string BlockId) {
            this.GetNewMessagesForSiteAsync(UserId, DeviceId, BlockId, null);
        }
        
        /// <remarks/>
        public void GetNewMessagesForSiteAsync(string UserId, string DeviceId, string BlockId, object userState) {
            if ((this.GetNewMessagesForSiteOperationCompleted == null)) {
                this.GetNewMessagesForSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewMessagesForSiteOperationCompleted);
            }
            this.InvokeAsync("GetNewMessagesForSite", new object[] {
                        UserId,
                        DeviceId,
                        BlockId}, this.GetNewMessagesForSiteOperationCompleted, userState);
        }
        
        private void OnGetNewMessagesForSiteOperationCompleted(object arg) {
            if ((this.GetNewMessagesForSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewMessagesForSiteCompleted(this, new GetNewMessagesForSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendEmail(string From, string To, string Subject, string Body) {
            object[] results = this.Invoke("SendEmail", new object[] {
                        From,
                        To,
                        Subject,
                        Body});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailAsync(string From, string To, string Subject, string Body) {
            this.SendEmailAsync(From, To, Subject, Body, null);
        }
        
        /// <remarks/>
        public void SendEmailAsync(string From, string To, string Subject, string Body, object userState) {
            if ((this.SendEmailOperationCompleted == null)) {
                this.SendEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailOperationCompleted);
            }
            this.InvokeAsync("SendEmail", new object[] {
                        From,
                        To,
                        Subject,
                        Body}, this.SendEmailOperationCompleted, userState);
        }
        
        private void OnSendEmailOperationCompleted(object arg) {
            if ((this.SendEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailCompleted(this, new SendEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckCashSessionTotal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckCashSessionTotal(string RecordId) {
            object[] results = this.Invoke("CheckCashSessionTotal", new object[] {
                        RecordId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckCashSessionTotalAsync(string RecordId) {
            this.CheckCashSessionTotalAsync(RecordId, null);
        }
        
        /// <remarks/>
        public void CheckCashSessionTotalAsync(string RecordId, object userState) {
            if ((this.CheckCashSessionTotalOperationCompleted == null)) {
                this.CheckCashSessionTotalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCashSessionTotalOperationCompleted);
            }
            this.InvokeAsync("CheckCashSessionTotal", new object[] {
                        RecordId}, this.CheckCashSessionTotalOperationCompleted, userState);
        }
        
        private void OnCheckCashSessionTotalOperationCompleted(object arg) {
            if ((this.CheckCashSessionTotalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCashSessionTotalCompleted(this, new CheckCashSessionTotalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TotalMealsPreSelected", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TotalMealsPreSelected(string LocationId, string Date) {
            object[] results = this.Invoke("TotalMealsPreSelected", new object[] {
                        LocationId,
                        Date});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TotalMealsPreSelectedAsync(string LocationId, string Date) {
            this.TotalMealsPreSelectedAsync(LocationId, Date, null);
        }
        
        /// <remarks/>
        public void TotalMealsPreSelectedAsync(string LocationId, string Date, object userState) {
            if ((this.TotalMealsPreSelectedOperationCompleted == null)) {
                this.TotalMealsPreSelectedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTotalMealsPreSelectedOperationCompleted);
            }
            this.InvokeAsync("TotalMealsPreSelected", new object[] {
                        LocationId,
                        Date}, this.TotalMealsPreSelectedOperationCompleted, userState);
        }
        
        private void OnTotalMealsPreSelectedOperationCompleted(object arg) {
            if ((this.TotalMealsPreSelectedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TotalMealsPreSelectedCompleted(this, new TotalMealsPreSelectedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAttachmentsZipped", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAttachmentsZipped(string TableName, string ReturnColumn, string FilterColumn, string FilterId) {
            object[] results = this.Invoke("GetAttachmentsZipped", new object[] {
                        TableName,
                        ReturnColumn,
                        FilterColumn,
                        FilterId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAttachmentsZippedAsync(string TableName, string ReturnColumn, string FilterColumn, string FilterId) {
            this.GetAttachmentsZippedAsync(TableName, ReturnColumn, FilterColumn, FilterId, null);
        }
        
        /// <remarks/>
        public void GetAttachmentsZippedAsync(string TableName, string ReturnColumn, string FilterColumn, string FilterId, object userState) {
            if ((this.GetAttachmentsZippedOperationCompleted == null)) {
                this.GetAttachmentsZippedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachmentsZippedOperationCompleted);
            }
            this.InvokeAsync("GetAttachmentsZipped", new object[] {
                        TableName,
                        ReturnColumn,
                        FilterColumn,
                        FilterId}, this.GetAttachmentsZippedOperationCompleted, userState);
        }
        
        private void OnGetAttachmentsZippedOperationCompleted(object arg) {
            if ((this.GetAttachmentsZippedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachmentsZippedCompleted(this, new GetAttachmentsZippedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UserDeviceManagementCompletedEventHandler(object sender, UserDeviceManagementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserDeviceManagementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserDeviceManagementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IsDeviceNeedsResettingCompletedEventHandler(object sender, IsDeviceNeedsResettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsDeviceNeedsResettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsDeviceNeedsResettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetStudentTransactionsURLCompletedEventHandler(object sender, GetStudentTransactionsURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStudentTransactionsURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStudentTransactionsURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMealSelectionURLCompletedEventHandler(object sender, GetMealSelectionURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMealSelectionURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMealSelectionURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTradingSummaryURLCompletedEventHandler(object sender, GetTradingSummaryURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTradingSummaryURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTradingSummaryURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetWeekMenuURLCompletedEventHandler(object sender, GetWeekMenuURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWeekMenuURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWeekMenuURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UpdateLastSynchronisedN2CompletedEventHandler(object sender, UpdateLastSynchronisedN2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateLastSynchronisedN2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateLastSynchronisedN2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPasswordCompletedEventHandler(object sender, GetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AuthenticateCompletedEventHandler(object sender, AuthenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AutoConfigCompletedEventHandler(object sender, AutoConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AutoConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AutoConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSyncTablesCompletedEventHandler(object sender, GetSyncTablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSyncTablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSyncTablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ClearSyncTableCompletedEventHandler(object sender, ClearSyncTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClearSyncTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClearSyncTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AckSyncTablesCompletedEventHandler(object sender, AckSyncTablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AckSyncTablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AckSyncTablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DownloadTableCompletedEventHandler(object sender, DownloadTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AckTableCompletedEventHandler(object sender, AckTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AckTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AckTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadDataZippedNCompletedEventHandler(object sender, UploadDataZippedNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDataZippedNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDataZippedNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadImageRawNCompletedEventHandler(object sender, UploadImageRawNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadImageRawNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadImageRawNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadImageRawCompletedEventHandler(object sender, UploadImageRawCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadImageRawCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadImageRawCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadImageZippedCompletedEventHandler(object sender, UploadImageZippedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadImageZippedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadImageZippedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetDocumentZippedCompletedEventHandler(object sender, GetDocumentZippedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentZippedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentZippedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetLinkImageZippedCompletedEventHandler(object sender, GetLinkImageZippedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkImageZippedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkImageZippedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetStaffImageZippedCompletedEventHandler(object sender, GetStaffImageZippedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStaffImageZippedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStaffImageZippedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EmailInspectionReportStandardCompletedEventHandler(object sender, EmailInspectionReportStandardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmailInspectionReportStandardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmailInspectionReportStandardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EmailInspectionReportSSP7CompletedEventHandler(object sender, EmailInspectionReportSSP7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmailInspectionReportSSP7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmailInspectionReportSSP7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DownloadZippedTableCompletedEventHandler(object sender, DownloadZippedTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadZippedTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadZippedTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckVersionCompletedEventHandler(object sender, CheckVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckVersionForUserCompletedEventHandler(object sender, CheckVersionForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckVersionForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckVersionForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetNewMessagesForSiteCompletedEventHandler(object sender, GetNewMessagesForSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewMessagesForSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewMessagesForSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendEmailCompletedEventHandler(object sender, SendEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckCashSessionTotalCompletedEventHandler(object sender, CheckCashSessionTotalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCashSessionTotalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCashSessionTotalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void TotalMealsPreSelectedCompletedEventHandler(object sender, TotalMealsPreSelectedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TotalMealsPreSelectedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TotalMealsPreSelectedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetAttachmentsZippedCompletedEventHandler(object sender, GetAttachmentsZippedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachmentsZippedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAttachmentsZippedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591